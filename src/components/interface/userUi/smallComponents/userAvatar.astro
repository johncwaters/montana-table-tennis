---
//TODO: pull avatar from session

//color based on the persons name
function stringToColour(str: string) {
    var hash = 0;
    for (var i = 0; i < str.length; i++) {
        hash = str.charCodeAt(i) + ((hash << 5) - hash);
    }
    var colour = "#";
    for (var i = 0; i < 3; i++) {
        var value = (hash >> (i * 8)) & 0xff;
        colour += ("00" + value.toString(16)).substr(-2);
    }
    return colour;
}

//get the users initials
function getFirstLetters(str: string) {
    const firstLetters = str
        .split(" ")
        .map((word) => word[0])
        .join("");

    return firstLetters;
}

export interface Props {
    name: string;
    avatar?: string;
    width: string;
    textSize: string;
    href?: string;
}

const { name, avatar, width, textSize, href } = Astro.props;

//If no avatar url is provided, use initials instead
var userName = !avatar ? getFirstLetters(name) : name; //TODO Repalce name with avatar
var backgroundColor = !avatar ? stringToColour(name) : "grey";
var classBuilderAvatar =
    "bg-neutral-focus text-neutral-content rounded-full " + width;
var classBuilderName = "text-primary-content " + textSize;
var hrefBuilder = href; //TODO: this can eventually direct to the specific user

!hrefBuilder
    ? null
    : (classBuilderAvatar = classBuilderAvatar + " " + "cursor-pointer");
---

<div class="avatar placeholder" onclick={hrefBuilder}>
    <div class={classBuilderAvatar} id="userAvatar">
        <span class={classBuilderName}>{userName}</span>
    </div>
</div>

<style define:vars={{ backgroundColor }}>
    #userAvatar {
        background-color: var(--backgroundColor);
    }
</style>
